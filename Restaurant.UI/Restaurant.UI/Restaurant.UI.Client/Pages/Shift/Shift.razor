@page "/setting/shift"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Restaurant.UI.Client.Components
@using Restaurant.UI.Client.Components.Common
@using Restaurant.UI.Client.Models
@using Restaurant.UI.Client.Shared
@using SharedLib.Models.Common
@using SharedLib.Models.Shift

@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(false))
@inherits PageBase

<AddPageTitle PageTitle="Shifts"/>



<EditForm OnValidSubmit="RefreshResults" Model="@Filter" FormName="ShiftFilter">
    <div class="card">
        <div class="card-header">
            <b>Filters</b>
        </div>
        <div class="card-body bg-light">
            <div class="row">
                <label for="iptSearch" class="col-sm-1 col-form-label">Shift Name</label>
                <div class="col-sm-4 col-md-3">
                    <InputText id="iptSearch" @bind-Value="@Filter.Name" pattern="[a-zA-Z]+" title="Text only" class="form-control outline-logging-red input-sm" />
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-md-12 d-flex align-items-center justify-content-end">
                    <a title="Clear Search Parameters" @onclick="@Clear" class="btn btn-warning btn-sm">
                        <i class="fa fa-eraser" aria-hidden="true"></i>
                    </a>
                    <a title="New Shift" @onclick="()=> OpenShiftDialog(null)" class="btn btn-primary btn-sm mx-1">
                        <i class="fa fa-plus" aria-hidden="true"></i>
                    </a>
                    <button type="submit" title="Search" class="btn btn-success btn-sm">
                        <i class="fa fa-search" aria-hidden="true"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<FormDialog @rendermode="InteractiveAuto" FormData="ShiftFormData" Title="@((ShiftFormData.Model is null || ShiftFormData.Model.Id == 0) ? "Add New Shift" : "Update Shift")"
            OnAccept="PostChanges" Context="editModel">
    <ChildBodyContext>
        <div class="mb-3">
            <label for="ipt_ShiftName" class="form-label">Name</label>
            @if (editModel.Id == 0)
            {
                <InputText id="ipt_ShiftName" @bind-Value="@editModel.Name" class="form-control" placeholder="Enter shift name..." />
            }
            else
            {
                <span class="form-control">@editModel.Name</span>
                
            }
        </div>
        <div class="mb-3">
            <label for="iptd_ShiftBegin" class="form-label">Begin</label>
            <TimePicker Id="iptd_ShiftBegin" @bind-Value="@editModel.BeginStr" />
        </div>
        <div class="mb-3">
            <label for="iptd_ShiftFinish" class="form-label">End</label>
            <TimePicker Id="iptd_ShiftFinish" @bind-Value="@editModel.EndStr" />
        </div>

    </ChildBodyContext>
</FormDialog>


<div class="row table-row">
    <div class="col-md-12">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="w-25">Name</th>
                    <th>Begin</th>
                    <th>End</th>
                    <th>Duration</th>
                    <th>
                        <div class="pull-right me-3">
                            <span class="fa fa-cog"></span>
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var shift in Shifts)
                {
                    <tr>
                        <td>@shift.Name</td>
                        <td>@shift.Begin.ToShortTimeString()</td>
                        <td>@shift.End.ToShortTimeString()</td>
                        <td>

                            @{
                                <span class="badge @(shift.ShiftDuration.Hours < 8 ? "bg-warning" : "bg-danger") ">@shift.ShiftDuration.ToString()</span>
                            }
                        </td>
                        <td>
                            <div class="d-flex align-items-center justify-content-end">
                                <a title="Update" @onclick="()=> OpenShiftDialog(shift)" class="me-2 cursor-pointer">
                                    <i class="fa fa-edit text-secondary"></i>
                                </a>
                                <a title="Delete" @onclick="() => DeleteShift(shift.Id)" class="cursor-pointer">
                                    <i class="fa fa-trash-o text-danger"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
</div>

<hr class="bg-black w-100 mt-0" style="padding:2px;" />
<div class="row">
    <div class="col-md-12">
        <Pager Result="@PagedResult" OnPagedChanged="@(async (int n)=> await RefreshPageByNumber(n))"/>
    </div>
</div>


<ConfirmDialog @rendermode="InteractiveAuto" @ref="_confirmDialog" />

@code {
    private FormDialogModel<ShiftViewModel> ShiftFormData { get; set; } = new FormDialogModel<ShiftViewModel>();
    private ShiftFilter Filter { get; set; } = new() { RequestCount = true };
    private List<ShiftViewModel> Shifts { get; set; } = new();
    private ConfirmDialog _confirmDialog;
    private PagedResult<ShiftModel> PagedResult { get; set; } = new PagedResult<ShiftModel>();


    protected override async Task OnInitializedAsync()
    {
        await RefreshResults();
    }

    public async Task RefreshResults()
    {
        try
        {
            var response = await _httpClient.PostJsonNewtonAsync<PagedResult<ShiftModel>?>("api/shift/searchshiftbyfilter", Filter);
            
            if (response is null || response.Error is not null)
            {
                await ToastError(response is null ? "No response was received" : response.Error?.Message ?? "Something Happpened");
            }
            else
            {
                PagedResult = response;
                Shifts = response.Results.Select(s => new ShiftViewModel
                    {
                        Id = s.Id,
                        Name = s.Name,
                        Begin = s.Begin,
                        End = s.End
                    }).ToList();
            }
        }
        catch (Exception ex)
        {
            await ToastError(ex.Message);
        }
    }

    public async Task OpenShiftDialog(ShiftViewModel? shiftModel)
    {
        try
        {
            if (shiftModel is null)
                shiftModel = new ShiftViewModel();


            ShiftFormData.Model = new ShiftViewModel
                {
                    Id = shiftModel.Id,
                    Name = shiftModel.Name,
                    Begin = shiftModel.Begin,
                    End = shiftModel.End
                };

            ShiftFormData.State.Show();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ToastError(ex.Message);
        }
    }

    private async Task Clear()
    {
        Filter = new() { RequestCount = true };
        await RefreshResults();
        StateHasChanged();
    }

    public async Task PostChanges()
    {
        var shift = ShiftFormData.Model;

        try
        {
            if (shift is null)
            {
                await ToastError("Invalid Shift");
                return;
            }

            var response = shift.Id <= 0 ? await _httpClient.PostJsonNewtonAsync<ApiOperationResult?>("api/shift/createshift", shift.ToShiftInsertmodel())
                                        : await _httpClient.PutJsonNewtonAsync<ApiOperationResult?>("api/shift/updateshift", shift.ToShiftModel());

            if (response is null)
            {
                ShiftFormData.State.Show();
                ShiftFormData.State.AddErrors(new List<string>() { "No response was received" });
            }
            else
            if (response.IsSuccess)
            {
                await ToastSuccess("Success", $"Shift successfully {(shift.Id <= 0 ? "created" : "updated")}");
                ShiftFormData.State.Hide();
                await RefreshResults();
            }
            else
            {
                var errors = response.Errors?.Select(e => e.Message) ?? new List<string> { "Something happened" };
                ShiftFormData.State.Show();
                ShiftFormData.State.AddErrors(errors.ToList());

            }
        }
        catch (Exception ex)
        {
            ShiftFormData.State.AddError(ex.Message);
            ShiftFormData.State.Show();
        }
        finally
        {
            StateHasChanged();

        }
    }


    public async Task DeleteShift(int id)
    {
        try
        {
            if (id == 0)
                await ToastError("Incorrect shift id, cannot be deleted");

            if (!await _confirmDialog.ShowDialog("Delete", new List<string> { "Are you going to delete this item" }))
                return;

            var response = await _httpClient.DeleteJsonNewtonAsync<ApiOperationResult>($"api/shift/{id}");

            if (response is null)
            {
                await ToastError( "No response was received" );
                await RefreshResults();
            }
            else
            if (response.IsSuccess)
            {
                await RefreshResults();
                await ToastSuccess("Success", "Shift deleted");
            }
            else
            {
                var errors = response.Errors?.Select(e => e.Message);
                await ToastError(string.Join(", ", errors?.ToList() ?? new()));
            }
        }
        catch (Exception ex)
        {
            await ToastError(ex.Message);
        }

        StateHasChanged();
    }

    private async Task RefreshPageByNumber(int num)
    {
        if (num <= 0 || num > PagedResult.PageCount)
            await ToastError("Page selected doesn't exist");

        Filter.Page = num;
        await RefreshResults();
        StateHasChanged();
    }
}
