@using SharedLib.Models.Common

<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-end">
        <li class="page-item">
            @if (Result.Currentpage > 1)
            {
                <a class="page-link" aria-label="Previous" @onclick="() => PrevPage()">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            }
            else
            {
                <span class="page-link" aria-hidden="true" style="cursor:not-allowed;">&laquo;</span>
            }
        </li>
        @if (!Result.PageCount.HasValue)
        {
            <li class="page-item"><span class="page-link" style="cursor:not-allowed;">1</span></li>
        }
        else
        {
            for (int i = 0; i < Result.PageCount!.Value; i++)
            {
                var index = i + 1;
                <li class="page-item">
                    <a class="page-link" @onclick="() => UpdatePage(index)">@index</a>
                </li>
            }
        }

        <li class="page-item">
            @if (Result.HasNextPage)
            {
                <a class="page-link" @onclick="() => NextPage()" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            }
            else
            {
                <span class="page-link" aria-hidden="true" style="cursor:not-allowed">&raquo;</span>
            }
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public PagedResult Result { get; set; }

    [Parameter]
    public EventCallback<int> OnPagedChanged { get; set; }


    private async Task UpdatePage(int page)
    {
        if (Result.Currentpage != page)
        {
            Result.Currentpage = page;
            await OnPagedChanged.InvokeAsync(page);
        }
    }

    private async Task NextPage()
    {
        Result.Currentpage = Result.Currentpage + 1;
        await OnPagedChanged.InvokeAsync(Result.Currentpage);
    }

    private async Task PrevPage()
    {
        Result.Currentpage = Result.Currentpage - 1;
        await OnPagedChanged.InvokeAsync(Result.Currentpage);
    }

}
