@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Restaurant.UI.Components.Layout
@using Restaurant.UI.Data

@layout LoginLayout
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<div class="row">
    <div class="col-sm-4 col-md-3 center-div">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <div class="input-group login-input-group">
                    <InputText @bind-Value="Input.Email" id="ipt_ResetPasswd" aria-describedby="" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <button id="btn_ResetPasswd" type="button" class="btn btn-outline-secondary bg-white" onclick="tooglePasswordShow('ipt_ResetPasswd','i_resetPassword')">
                        <span class="fa fa-eye-slash" id="i_resetPassword" aria-hidden="true"></span>
                    </button>
                </div>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn rounded-pill btn-page-login outline-logging-red">Reset password</button>
            <div class="row mt-2 ">
                <div class="col-md-12 d-flex justify-content-center">
                    <span>
                        <a href="/Account/Login" class="login-text-color text-decoration-none">Login</a>
                    </span>
                </div>
            </div>
        </EditForm>
     </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
